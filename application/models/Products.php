<?php

/**
 * Products
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property CI_Controller $CI
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Products extends BaseProducts {

    var $CI;

    public function __construct($table = null, $isNewEntry = false) {
        parent::__construct($table, $isNewEntry);
        $this->CI = get_instance();
    }

    public function processForm() {
        if ($_POST && $this->validateForm()) {
//            echo $_POST['prod_description_en-us'];exit;
            $this->prod_banner = $_POST['prod_banner'];
            $this->prod_home_img = $_POST['prod_home_img'];
            $this->prod_order = $_POST['prod_order'];
            $this->prod_is_active = $_POST['prod_is_active'];
            $this->save();
            
            foreach (get_lang_list() as $key => $lang) {
                $language = LanguagesTable::getLanguage($key);
                $prodDetails = ProductDetailsTable::getInstance()
                        ->findBySql('prod_id =? AND lang_id=?', array($this->prod_id,$language['lang_id']));
                $prodDetail=$prodDetails[0];
                $prodDetail->prod_id = $this->prod_id;
                $prodDetail->prod_title = $_POST['prod_title_' . $key];
                $prodDetail->prod_description = $_POST['prod_description_' . $key];
                $prodDetail->prod_summary = $_POST['prod_summary_' . $key];
                $prodDetail->lang_id = $language['lang_id'];
                $prodDetail->save();
            }
            save_url(URL_PREFIX_PRODUCT_VIEW.$this->prod_id);
            return true;
        }

        return FALSE;
    }

    private function validateForm() {

        $this->CI->form_validation->set_error_delimiters('<span class="frm_error_msg">', '</span>');
        foreach (get_lang_list() as $key => $lang) {
            $this->CI->form_validation->set_rules("prod_title_$key", "", "required|xss_clean");
            $this->CI->form_validation->set_rules("prod_description_$key", "", "required");
            $this->CI->form_validation->set_rules("prod_summary_$key", "", "required|xss_clean");
        }
        if($this->prod_id){
            validte_url(URL_PREFIX_PRODUCT_VIEW.$this->prod_id);
        }else{
            validte_url();
        }
        $this->CI->form_validation->set_rules("prod_banner", "", "required|xss_clean");
        $this->CI->form_validation->set_rules("prod_home_img", "", "required|xss_clean");
        $this->CI->form_validation->set_rules("prod_order", "", "required|numeric|xss_clean");
        $this->CI->form_validation->set_rules("prod_is_active", "", "xss_clean");

        return $this->CI->form_validation->run();
    }

    public function populateForm() {
        if (!$_POST) {
            foreach (get_lang_list() as $key => $lang) {
                $prodDetail = ProductDetailsTable::getProductDetail($this->prod_id, $key);
                
                $_POST["prod_title_$key"] = $prodDetail[0]['prod_title'];
                $_POST["prod_description_$key"] = $prodDetail[0]['prod_description'];
                $_POST["prod_summary_$key"] = $prodDetail[0]['prod_summary'];
            }
            $_POST["prod_banner"] = $this->prod_banner;
            $_POST["prod_home_img"] = $this->prod_home_img;
            $_POST["prod_order"] = $this->prod_order;
            $_POST["prod_is_active"] = $this->prod_is_active;
            populate_url(URL_PREFIX_PRODUCT_VIEW.$this->prod_id);
            $this->CI->process_form = false;
            $this->validateForm();
        }
    }
    
    public function delete(Doctrine_Connection $conn = null) {
        parent::delete($conn);
        delete_url(URL_PREFIX_PRODUCT_VIEW.$this->prod_id);
    }

}